"use strict";
Number.prototype.format = function (n, x, s) {
  s = typeof s != "undefined" ? s : ",";
  var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (n > 0 ? "\\." : "$") + ")";
  return this.toFixed(Math.max(0, ~~n)).replace(new RegExp(re, "g"), "$&" + s);
};
var RemovalMain = { data: removal_data, isFormValid: !0 };
RemovalMain.data.api_remove_url = "https://api.removal.ai/3.0/remove";
RemovalMain.data.api_token_url = "https://api.removal.ai/web-token/request";
(function ($) {
  RemovalMain.initField = function () {
    $(".fat-semantic-container .ui.dropdown").each(function () {
      var self = $(this),
        direction =
          typeof self.attr("data-direction") != "undefined" &&
          self.attr("data-direction") != ""
            ? self.attr("data-direction")
            : "auto";
      self.dropdown({
        clearable: self.hasClass("clearable"),
        direction: direction,
      });
    });
    $(".fat-semantic-container .ui.checkbox").checkbox();
    $(".ui.input.number > input").on("keypress", function (event) {
      var self = $(this),
        type = self.attr("data-type"),
        min = self.attr("data-min"),
        max = self.attr("data-max"),
        validkeys = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"];
      if (self.hasClass("disabled")) {
        return !1;
      }
      type = typeof type == "undefined" ? "int" : type;
      if (type == "decimal") {
        validkeys.push(".");
      }
      if (validkeys.indexOf(event.key) < 0) {
        return !1;
      }
    });
    $(".ui.input.number > input").on("change", function (event) {
      var self = $(this),
        min = self.attr("data-min"),
        max = self.attr("data-max"),
        value = self.val();
      if (
        typeof min != "undefined" &&
        !isNaN(min) &&
        value != "" &&
        !isNaN(value)
      ) {
        if (parseFloat(value) < parseFloat(min)) {
          $(this).val(min);
          event.preventDefault();
        }
      }
      if (
        typeof max != "undefined" &&
        !isNaN(max) &&
        value != "" &&
        !isNaN(value)
      ) {
        if (parseFloat(value) > parseFloat(max)) {
          $(this).val(max);
          event.preventDefault();
        }
      }
    });
    $(".ui.input.number > input[data-min]").each(function () {
      if ($(this).val() == "") {
        $(this).val($(this).attr("data-min"));
      }
    });
    $(".button", ".input.number.has-button")
      .off("click")
      .on("click", function () {
        var self = $(this),
          container = self.closest(".input.number.has-button"),
          input = $("input", container),
          value = input.val(),
          step = input.attr("data-step"),
          type = input.attr("data-type"),
          min = input.attr("data-min"),
          max = input.attr("data-max");
        type = typeof type == "undefined" ? "int" : type;
        if (type == "decimal") {
          step =
            typeof step == "undefined" || isNaN(step) ? 1 : parseFloat(step);
          min = !isNaN(min) ? parseFloat(min) : "";
          max = !isNaN(max) ? parseFloat(max) : "";
          value = value == "" ? 0 : parseFloat(value);
        } else {
          step = typeof step == "undefined" || isNaN(step) ? 1 : parseInt(step);
          min = !isNaN(min) ? parseInt(min) : "";
          max = !isNaN(max) ? parseInt(max) : "";
          value = value == "" ? 0 : parseInt(value);
        }
        if (self.hasClass("number-decrease")) {
          if (min !== "" && value - step < min) {
            RemovalMain.showMessage(apoint_data.min_value_message + min, 2);
          } else {
            value >= step ? input.val(value - step) : input.val(0);
          }
        } else {
          if (max !== "" && value + step > max) {
            RemovalMain.showMessage(apoint_data.max_value_message + max, 2);
          } else {
            input.val(value + step);
          }
        }
      });
    $(".ui-tooltip,.ui-popup").popup({
      inline: !0,
      hoverable: !0,
      position: "top left",
      delay: { show: 300, hide: 500 },
    });
    $(".ui-popup").each(function () {
      var position = $(this).attr("data-position");
      position =
        typeof position != "undefined" && position != ""
          ? position
          : "top left";
      $(this).popup({
        inline: !0,
        hoverable: !0,
        position: position,
        delay: { show: 300, hide: 500 },
      });
    });
    $(".button[data-content]").popup({ inline: !0 });
    $(".fat-submit-modal").on("click", function (event) {
      var form = $(this).closest(".ui.modal.fat-semantic-container");
      RemovalMain.isFormValid = !0;
      RemovalMain.isFormValid = RemovalMain.validateForm($(".ui.form", form));
    });
  };
  RemovalMain.initNumberField = function (container) {
    $(".ui.input.number > input", container).on("keypress", function (event) {
      var self = $(this),
        type = self.attr("data-type"),
        min = self.attr("data-min"),
        max = self.attr("data-max"),
        validkeys = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"];
      if (self.hasClass("disabled")) {
        return !1;
      }
      type = typeof type == "undefined" ? "int" : type;
      if (type == "decimal") {
        validkeys.push(".");
      }
      if (validkeys.indexOf(event.key) < 0) {
        return !1;
      }
    });
    $(".ui.input.number > input", container).on("change", function (event) {
      var self = $(this),
        min = self.attr("data-min"),
        max = self.attr("data-max"),
        value = self.val();
      if (
        typeof min != "undefined" &&
        !isNaN(min) &&
        value != "" &&
        !isNaN(value)
      ) {
        if (parseFloat(value) < parseFloat(min)) {
          $(this).val(min);
          event.preventDefault();
        }
      }
      if (
        typeof max != "undefined" &&
        !isNaN(max) &&
        value != "" &&
        !isNaN(value)
      ) {
        if (parseFloat(value) > parseFloat(max)) {
          $(this).val(max);
          event.preventDefault();
        }
      }
    });
    $(".ui.input.number > input[data-min]", container).each(function () {
      if ($(this).val() == "") {
        $(this).val($(this).attr("data-min"));
      }
    });
    $(".button", ".input.number.has-button", container)
      .off("click")
      .on("click", function () {
        var self = $(this),
          container = self.closest(".input.number.has-button"),
          input = $("input", container),
          value = input.val(),
          step = input.attr("data-step"),
          type = input.attr("data-type"),
          min = input.attr("data-min"),
          max = input.attr("data-max");
        type = typeof type == "undefined" ? "int" : type;
        if (type == "decimal") {
          step =
            typeof step == "undefined" || isNaN(step) ? 1 : parseFloat(step);
          min = !isNaN(min) ? parseFloat(min) : "";
          max = !isNaN(max) ? parseFloat(max) : "";
          value = value == "" ? 0 : parseFloat(value);
        } else {
          step = typeof step == "undefined" || isNaN(step) ? 1 : parseInt(step);
          min = !isNaN(min) ? parseInt(min) : "";
          max = !isNaN(max) ? parseInt(max) : "";
          value = value == "" ? 0 : parseInt(value);
        }
        if (self.hasClass("number-decrease")) {
          if (min !== "" && value - step < min) {
            RemovalMain.showMessage(apoint_data.min_value_message + min, 2);
          } else {
            value >= step ? input.val(value - step) : input.val(0);
          }
        } else {
          if (max !== "" && value + step > max) {
            RemovalMain.showMessage(apoint_data.max_value_message + max, 2);
          } else {
            input.val(value + step);
          }
        }
      });
  };
  RemovalMain.showMessage = function (message, type) {
    var css_class = typeof type == "undefined" || type == "1" ? "blue" : "red",
      icon =
        typeof type == "undefined" || type == "1" ? "check icon" : "close icon";
    css_class = type == "3" ? "orange" : css_class;
    var elm_message = '<div class="fat-sb-message ' + css_class + '">';
    elm_message +=
      typeof icon != "undefined" && icon != ""
        ? '<i class="' + icon + '"></i>'
        : "";
    elm_message += "<span>" + message + "</span>";
    elm_message += "</div>";
    elm_message = $(elm_message);
    var bottom = $("body .fat-sb-message").length * 60 + 50 + "px";
    $(elm_message).css("bottom", bottom);
    $("body").append(elm_message);
    setTimeout(function () {
      $(elm_message).addClass("show-up");
      setTimeout(function () {
        $(elm_message).removeClass("show-up");
        setTimeout(function () {
          $(elm_message).remove();
        }, 300);
      }, 4000);
    }, 200);
  };
  RemovalMain.validateForm = function (form) {
    var input,
      fieldType,
      message,
      val = "",
      isValid = !0;
    $("input[required]", form).each(function () {
      input = $(this);
      message = input.attr("data-validate-message");
      fieldType = input.attr("data-field-type");
      val = input.val().trim();
      if (input.is(":checkbox")) {
        val = input.is(":checked") ? "1" : "";
      }
      if (val == "") {
        input.closest(".rm-field").addClass("field-error");
        isValid = !1;
      } else {
        input.closest(".rm-field").removeClass("field-error");
      }
    });
    $('input[type="email"]', form).each(function () {
      input = $(this);
      var pattern = new RegExp(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/),
        email = input.val().trim();
      if (email == "" || !pattern.test(email)) {
        input.closest(".rm-field").addClass("field-error");
        isValid = !1;
      } else {
        input.closest(".rm-field").removeClass("field-error");
      }
    });
    return isValid;
  };
  RemovalMain.resetValidateField = function (self) {
    if (self.val() != "") {
      self.closest(".rm-field").removeClass("field-error");
    }
  };
  RemovalMain.resetEmailValidateField = function (self) {
    var pattern = new RegExp(/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/),
      email = self.val().trim();
    if (email != "" && pattern.test(email)) {
      self.closest(".rm-field").removeClass("field-error");
    }
  };
  RemovalMain.showProcess = function (button) {
    $("body").append('<div class="rm-process-container"></div>');
    $(button).addClass("loading");
  };
  RemovalMain.closeProcess = function (button) {
    $("body .rm-process-container").remove();
    $(button).removeClass("loading");
  };
  RemovalMain.showLoading = function (container, loading_label) {
    $(".fat-ui-loader-container", container).remove();
    loading_label =
      typeof loading_label != "undefined" && loading_label != ""
        ? loading_label
        : RemovalMain.data.loading_label;
    container.append(
      '<div class="fat-ui-loader-container"><div class="fat-ui-loader">' +
        loading_label +
        "</div></div>"
    );
  };
  RemovalMain.closeLoading = function (container) {
    $(".fat-ui-loader-container", container).remove();
  };
  RemovalMain.registerOnChange = function (container) {
    container =
      typeof container == "undefined"
        ? $(".fat-semantic-container")
        : container;
    $("[data-onChange]", container).each(function () {
      var self = $(this),
        callback = self.attr("data-onChange").split("."),
        obj = callback.length == 2 ? callback[0] : "",
        func = callback.length == 2 ? callback[1] : callback[0];
      if (self.hasClass("ui") && self.hasClass("dropdown")) {
        self.dropdown({
          onChange: function (value, text, $choice) {
            if (self.hasClass("onChange-disabled")) {
              return;
            }
            if (obj != "") {
              typeof window[obj][func] != "undefined" &&
              window[obj][func] != null
                ? window[obj][func](value, text, $choice)
                : "";
            } else {
              typeof window[func] != "undefined" && window[func] != null
                ? window[func](value, text, $choice)
                : "";
            }
          },
        });
        return;
      }
      if (self.hasClass("SumoUnder")) {
        self.on("sumo:closed", function (sumo) {
          if (obj != "") {
            typeof window[obj][func] != "undefined" && window[obj][func] != null
              ? window[obj][func](self, sumo)
              : "";
          } else {
            typeof window[func] != "undefined" && window[func] != null
              ? window[func](self, sumo)
              : "";
          }
        });
        return;
      }
      self.off("change").on("change", function () {
        if (self.hasClass("onChange-disabled")) {
          return;
        }
        if (obj != "") {
          typeof window[obj][func] != "undefined" && window[obj][func] != null
            ? window[obj][func](self)
            : "";
        } else {
          typeof window[func] != "undefined" && window[func] != null
            ? window[func](self)
            : "";
        }
      });
    });
  };
  RemovalMain.registerOnClick = function (container) {
    container =
      typeof container == "undefined"
        ? $(".fat-semantic-container")
        : container;
    $("[data-onClick]", container).each(function () {
      var self = $(this),
        callback = self.attr("data-onClick").split("."),
        obj = callback.length == 2 ? callback[0] : "",
        func = callback.length == 2 ? callback[1] : callback[0],
        prevent_event = self.attr("data-prevent-event");
      self.on("click", function (event) {
        if (prevent_event) {
          event.preventDefault();
        }
        if (obj != "") {
          typeof window[obj][func] != "undefined" && window[obj][func] != null
            ? window[obj][func](self, event)
            : "";
        } else {
          typeof window[func] != "undefined" && window[func] != null
            ? window[func](self, event)
            : "";
        }
        if (prevent_event) {
          return !1;
        }
      });
    });
  };
  RemovalMain.registerOnKeyUp = function (container) {
    container =
      typeof container == "undefined"
        ? $(".fat-semantic-container")
        : container;
    $("[data-onKeyUp]", container).each(function () {
      var self = $(this),
        callback = self.attr("data-onKeyUp").split("."),
        obj = callback.length == 2 ? callback[0] : "",
        func = callback.length == 2 ? callback[1] : callback[0];
      self.off("keyup").on("keyup", function () {
        if (obj != "") {
          typeof window[obj][func] != "undefined" && window[obj][func] != null
            ? window[obj][func](self)
            : "";
        } else {
          typeof window[func] != "undefined" && window[func] != null
            ? window[func](self)
            : "";
        }
      });
    });
  };
  RemovalMain.registerEventProcess = function (container) {
    container =
      typeof container == "undefined"
        ? $(".fat-semantic-container")
        : container;
    RemovalMain.registerOnChange(container);
    RemovalMain.registerOnClick(container);
    RemovalMain.registerOnKeyUp(container);
  };
  RemovalMain.initPaging = function (total, page, elm, callback) {
    var item_per_page = RemovalMain.data.item_per_page,
      page_display = RemovalMain.data.item_per_page,
      obj = elm.attr("data-obj"),
      func = elm.attr("data-func"),
      paging = '<div class="ui right floated pagination menu" >';
    page = parseInt(page);
    total = parseInt(total);
    item_per_page = parseInt(item_per_page);
    $(".ui.pagination", elm).remove();
    if (total > item_per_page) {
      var number_of_page =
          Math.floor(total / item_per_page) +
          (total % item_per_page > 0 ? 1 : 0),
        $start_index = 1,
        $end_index = 0;
      $start_index = page - 2 > 0 ? page - 2 : 1;
      $end_index = page + 2 < number_of_page ? page + 2 : number_of_page;
      if (page == 1) {
        paging +=
          ' <button class="ui button nav-first nav-disabled"> <i class="angle double left icon"></i></button>';
        paging +=
          ' <button class="ui button fat-bt-prev nav-disabled"> <i class="angle left icon"></i></button>';
      } else {
        paging +=
          ' <button class="ui button nav-first" data-page="1"> <i class="angle double left icon"></i></button>';
        paging +=
          ' <button class="ui button fat-bt-prev" data-page="' +
          (page - 1) +
          '"> <i class="angle left icon"></i></button>';
      }
      for (
        var $page_index = $start_index;
        $page_index <= $end_index;
        $page_index++
      ) {
        paging +=
          '<button class="ui button" data-page="' +
          $page_index +
          '">' +
          $page_index +
          "</button>";
      }
      if (page == number_of_page) {
        paging +=
          ' <button class="ui button fat-bt-next nav-disabled"> <i class="angle right icon"></i></button>';
        paging +=
          ' <button class="ui button nav-last nav-disabled"> <i class="angle double right icon"></i></button>';
      } else {
        paging +=
          ' <button class="ui button fat-bt-next" data-page="' +
          (page + 1) +
          '"> <i class="angle right icon"></i></button>';
        paging +=
          ' <button class="ui button nav-last" data-page="' +
          number_of_page +
          '"> <i class="angle double right icon"></i></button>';
      }
      $(elm).append(paging);
      $(
        '.ui.pagination button.ui.button[data-page="' + page + '"]',
        elm
      ).addClass("active");
      if (
        typeof window[obj][func] != "undefined" &&
        window[obj][func] != null
      ) {
        $(
          ".ui.pagination button.ui.button:not(.nav-disabled)",
          ".fat-sb-pagination"
        )
          .off("click")
          .on("click", function () {
            var self = $(this),
              page = self.attr("data-page");
            if (!self.hasClass("active")) {
              self.addClass("loading");
              window[obj][func](page);
            }
          });
      }
      if (typeof callback == "function") {
        callback();
      }
    }
  };
  RemovalMain.showNotFoundMessage = function (elm, wrap_start, wrap_end) {
    var content = "";
    if (typeof wrap_start != "undefined" && wrap_start != "") {
      content = wrap_start;
    }
    content +=
      '<div class="fat-sb-not-found">' +
      RemovalMain.data.not_found_message +
      "</div>";
    if (typeof wrap_end != "undefined" && wrap_end != "") {
      content += wrap_end;
    }
    $(".fat-sb-not-found", elm).remove();
    elm.append(content);
  };
  RemovalMain.showConfirmPopup = function ($popup_title, $message, callback) {
    var popup = $(
      '<div class="ui mini modal fat-sb-confirm-popup rm-hidden">\n' +
        '  <div class="ui header">\n' +
        $popup_title +
        "  </div>\n" +
        '  <div class="content">\n' +
        $message +
        "  </div>\n" +
        '  <div class="actions">\n' +
        '    <div class="ui button cancel fat-sb-bt-confirm">\n' +
        '      <i class="remove icon"></i>\n' +
        "No" +
        "    </div>\n" +
        '    <div class="ui primary yes button fat-sb-bt-confirm ">\n' +
        '      <i class="checkmark icon"></i>\n' +
        "Yes" +
        "    </div>\n" +
        "  </div>\n" +
        "</div>"
    );
    $("body").append(popup);
    $(popup).modal("setting", "closable", !1).modal("show");
    setTimeout(function () {
      $(".ui.fat-sb-confirm-popup").removeClass("rm-hidden");
    }, 100);
    $(".fat-sb-bt-confirm").on("click", function () {
      if (typeof callback == "function") {
        var $result = $(this).hasClass("cancel") ? 0 : 1;
        if ($result == 1) {
          callback($result, popup);
        } else {
          $(".fat-sb-confirm-popup").modal("hide");
        }
      }
    });
  };
  RemovalMain.ajaxGet = function (
    url,
    params,
    customHeaders,
    responseDataType = "json"
  ) {
    return new Promise(function (resolve, reject) {
      $.ajax({
        url: url,
        type: "GET",
        data: params,
        dataType: responseDataType,
        headers: customHeaders,
        success: function (data) {
          resolve(data);
        },
        error: function (err) {
          reject(err.responseJSON ? err.responseJSON : err);
        },
      });
    });
  };
  RemovalMain.ajaxPost = function (
    url,
    data,
    customHeaders = null,
    responseDataType = "json"
  ) {
    return new Promise(function (resolve, reject) {
      $.ajax({
        url: url,
        type: "POST",
        data: data,
        dataType: responseDataType,
        headers: customHeaders,
        success: function (data) {
          resolve(data);
        },
        error: function (err) {
          reject(err.responseJSON ? err.responseJSON : err);
        },
      });
    });
  };
  RemovalMain.ajaxPostJson = function (
    url,
    data,
    customHeaders = null,
    responseDataType = "json"
  ) {
    return new Promise(function (resolve, reject) {
      $.ajax({
        url: url,
        type: "POST",
        data: data ? JSON.stringify(data) : null,
        processData: !1,
        contentType: "application/json",
        dataType: responseDataType,
        headers: customHeaders,
        success: function (data) {
          resolve(data);
        },
        error: function (err) {
          reject(err.responseJSON ? err.responseJSON : err);
        },
      });
    });
  };
  RemovalMain.ajaxPostFormData = function (
    url,
    formData,
    customHeaders = null,
    responseDataType = "json"
  ) {
    if (!(formData instanceof FormData)) {
      if (typeof formData != "object") throw "formData is invalid";
      formData = RemovalMain.objectToFormData(formData);
    }
    console.log("formData", formData);
    return new Promise(function (resolve, reject) {
      $.ajax({
        url: url,
        type: "POST",
        data: formData,
        processData: !1,
        contentType: !1,
        mimeType: "multipart/form-data",
        dataType: responseDataType,
        headers: customHeaders,
        success: function (data) {
          resolve(data);
        },
        error: function (err) {
          reject(err.responseJSON ? err.responseJSON : err);
        },
      });
    });
  };
  RemovalMain.objectToFormData = function (data) {
    var form_data = new FormData();
    for (var key in data) {
      if (data[key] instanceof File) {
        form_data.append(key, data[key], data[key].name);
      } else {
        form_data.append(key, data[key]);
      }
    }
    return form_data;
  };
  RemovalMain.isLoggedIn = function () {
    return $("body").is(".logged-in");
  };
})(jQuery);
